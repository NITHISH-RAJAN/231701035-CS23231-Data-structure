PRASANNA R     231701039

Open addressing:

#include <stdio.h>
#include <stdlib.h>
struct set {	
    int key;
    int data;
};
struct set *array;
int capacity = 10;
int size = 0;
int hashFunction(int key) {
    return (key % capacity);
}
int checkPrime(int n) {
    int i;
    if (n == 1 || n == 0) {
        return 0;
    }
    for (i = 2; i < n / 2; i++) {
        if (n % i == 0) {
            return 0;
        }
    }
    return 1;
}
void insert(int key, int data) {
    int index = hashFunction(key);
    while (array[index].key != -1) {
        index = (index + 1) % capacity;
    }
    array[index].key = key;
    array[index].data = data;
    size++;
}
int search(int key) {
    int index = hashFunction(key);
    int originalIndex = index;
    while (array[index].key != -1) {
        if (array[index].key == key) {
            return array[index].data;
        }
        index = (index + 1) % capacity;
        if (index == originalIndex) {
            break; 
        }
    }
    return -1; 
}
int main() {
    array = (struct set *)malloc(capacity * sizeof(struct set));
    for (int i = 0; i < capacity; i++) {
        array[i].key = -1; 
    }
    insert(42, 100);
    
    printf("Value for key 42: %d\n", search(42)); 

    free(array);
    return 0;
}

Closed addressing:

#include <stdio.h>
#include <stdlib.h>	
struct set {
    int key;
    int data;
};
struct set *array;
int capacity = 10;
int size = 0;
int hashFunction(int key) {
    return (key % capacity);
}
void insert(int key, int data) {
    int index = hashFunction(key);
    struct set *newElement = (struct set *)malloc(sizeof(struct set));
    newElement->key = key;
    newElement->data = data;
    newElement->next = NULL;
    if (array[index] == NULL) {
        array[index] = newElement;
    } else {
        newElement->next = array[index];
        array[index] = newElement;
    }
    size++;
}
int search(int key) {
    int index = hashFunction(key);
    struct set *current = array[index];
    while (current != NULL) {
        if (current->key == key) {
            return current->data;
        }
        current = current->next;
    }
    return -1;
}
int main() {
    array = (struct set *)malloc(capacity * sizeof(struct set));
    for (int i = 0; i < capacity; i++) {
        array[i] = NULL; 
    }
    insert(42, 100);
     printf("Value for key 42: %d\n", search(42)); 
    return 0;
}
