PRASANNA R  231701039

#include <stdio.h>
#include <stdlib.h>
struct node{
    int data;
    struct node *left,*right;
}*root=NULL;
typedef struct node Tree;
void insert(int a){
    int flag=0;
    struct node *ptr=root,*parent;
    while(ptr!=NULL&&flag==0){
        if(a<ptr->data){
            parent=ptr;
            ptr=ptr->left;
        }else if(a>ptr->data){
            parent=ptr;
            ptr=ptr->right;
        }else if(a==ptr->data){
            flag=1;
        }
    }
    Tree *New=malloc(sizeof(Tree));
    New->left=New->right=NULL;
    New->data=a;
    if(flag){
        return;
    }else if(root==NULL){
        root=New;
    }else{
        if(a<parent->data) parent->left=New;
        else parent->right=New; 
    }
}
void inorder(Tree *ptr){
    if(ptr!=NULL){
        inorder(ptr->left);
        printf("%d ",ptr->data);
        inorder(ptr->right);
    }
}
void preorder(Tree *ptr){
    if(ptr!=NULL){
        printf("%d ",ptr->data);
        preorder(ptr->left);
        preorder(ptr->right);
    }
}
void postorder(Tree *ptr){
    if(ptr!=NULL){
        postorder(ptr->left);
        postorder(ptr->right);
        printf("%d ",ptr->data);
    }
}
void search(int a){
    Tree *parent,*ptr=root;
    int flag=0;
    while(ptr!=NULL&&flag==0){
        if(a<ptr->data){
            parent=ptr;
            ptr=ptr->left;
        }else if(a>ptr->data){
            parent=ptr;
            ptr=ptr->right;
        }else if(a==ptr->data){
            flag=1;
            printf("%d found",ptr->data);
        }
    }
    if(flag==0) printf("Number not found");
}
int main(){
    insert(10);
    insert(20);
    insert(15);
    insert(10);
    insert(5);
    insert(7);
    insert(8);
    insert(4);
    insert(3);
    inorder(root);
    printf("\n");
    preorder(root);
    printf("\n");
    postorder(root);
    printf("\n");
    search(30);
    printf("\n");
    search(15);
    printf("\n");
    search(7);
}
